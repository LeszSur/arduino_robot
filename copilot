#include <Wire.h>
#include <Adafruit_NeoPixel.h>
#include <QMC5883LCompass.h>
#include <IRremote.h>
#include <Servo.h>

double scale = 1.0;
Adafruit_NeoPixel linijka = Adafruit_NeoPixel(8, A2, NEO_GRB + NEO_KHZ800);
QMC5883LCompass compass;
int RECV_PIN = 3;
IRrecv irrecv(RECV_PIN);
decode_results results;
Servo serwo;
#define SERWO_PIN 11
#define trigPin 7
#define echoPin 8
#define L_PWM 5
#define L_DIR 4
#define R_PWM 6
#define R_DIR 9
#define PWM_MAX 165
#define LED_PIN 13

void setup() {
  pinMode(13, OUTPUT);
  irrecv.enableIRIn();
  Serial.begin(9600);
  serwo.attach(SERWO_PIN);
  serwo.write(90);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(L_DIR, OUTPUT);
  pinMode(R_DIR, OUTPUT);
  pinMode(L_PWM, OUTPUT);
  pinMode(R_PWM, OUTPUT);
}

void loop() {
  if (irrecv.decode(&results)) {
    translateIR();
    irrecv.resume();
  }

  if (Serial.available()) {
    serialEvent();
  }

  // Odczyt kompasu co 100 ms
  static unsigned long lastCompassRead = 0;
  if (millis() - lastCompassRead >= 100) {
    readCompass();
    lastCompassRead = millis();
  }
}

void readCompass() {
  int x, y, z;

  Wire.beginTransmission(0x0D);
  Wire.write(0x00);
  Wire.endTransmission();

  Wire.requestFrom(0x0D, 6);
  if (6 <= Wire.available()) {
    x = Wire.read();
    x |= Wire.read() << 8;
    y = Wire.read();
    y |= Wire.read() << 8;
    z = Wire.read();
    z |= Wire.read() << 8;

    double azimut = 180 * atan2(y, x) / 3.141592654;
    azimut += 0 - (19 / 60);

    if (azimut < 0) {
      azimut += 360;
    }

  // Aktualizacja linijki LED
       linijka.begin();
       linijka.clear();

    updateLED(azimut);
  }
}

void updateLED(double azimut) {
  // Twoja logika aktualizacji linijki LED
   //north
          if((azimut < 22.5)  || (azimut > 337.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 0, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 5));
            linijka.setPixelColor(4, linijka.Color(0, 0, 5));
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));
            linijka.setPixelColor(6, linijka.Color(0, 0, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          };
          //north-east
          if((azimut > 22.5)  && (azimut < 67.5 ))   {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 0, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(5, linijka.Color(0, 0, 5));
            linijka.setPixelColor(6, linijka.Color(0, 5, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
            };
            //east
          if((azimut > 67.5)  && (azimut < 112.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 0, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(6, linijka.Color(0, 5, 0));
            linijka.setPixelColor(7, linijka.Color(0, 5, 0));
            linijka.show();
          };
          //south-east
          if((azimut > 112.5) && (azimut < 157.5 )) {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 0, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(5, linijka.Color(5, 0, 0));
            linijka.setPixelColor(6, linijka.Color(0, 5, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          }; 
          //south
          if((azimut > 157.5) && (azimut < 202.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 0, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(5, 0, 0));
            linijka.setPixelColor(4, linijka.Color(5, 0, 0));
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));
            linijka.setPixelColor(6, linijka.Color(0, 0, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          };
          // south-west
          if((azimut > 202.5) && (azimut < 247.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 5, 0));
            linijka.setPixelColor(2, linijka.Color(5, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));
            linijka.setPixelColor(6, linijka.Color(0, 0, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          };
          //west
          if((azimut > 247.5) && (azimut < 292.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 5, 0));
            linijka.setPixelColor(1, linijka.Color(0, 5, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 0));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(6, linijka.Color(0, 0, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          };
          //north-west
          if((azimut > 292.5) && (azimut < 337.5 ))  {
            linijka.setPixelColor(0, linijka.Color(0, 0, 0));
            linijka.setPixelColor(1, linijka.Color(0, 5, 0));
            linijka.setPixelColor(2, linijka.Color(0, 0, 5));
            linijka.setPixelColor(3, linijka.Color(0, 0, 0));
            linijka.setPixelColor(4, linijka.Color(0, 0, 0));            
            linijka.setPixelColor(5, linijka.Color(0, 0, 0));
            linijka.setPixelColor(6, linijka.Color(0, 0, 0));
            linijka.setPixelColor(7, linijka.Color(0, 0, 0));
            linijka.show();
          };
}

void translateIR(){
  switch(results.value){
    case 0xFF18E7: //do przodu (2)
    leftMotor(40);
    rightMotor(40);
    break;

    case 0xFF4AB5: //do tyłu (8)
    leftMotor(-40);
    rightMotor(-40);
    break;

    case 0xFF38C7: //zatrzymanie silników (5)
    stopMotors();
    break;

    case 0xFF10EF: //obrót w lewo (4)
    leftMotor(-30);
    rightMotor(30);
    break;

    case 0xFF5AA5: //obrót w prawo (6)
    leftMotor(30);
    rightMotor(-30);
    break;

    case 0xFFC23D: //szukacz drogi (>||)
    szukacz();
    break;

    default:
    Serial.println("unknown button");
    Serial.println(results.value, HEX);
  }
  delay(500);
}

void serialEvent() {
  while (Serial.available()) {
    char state = (char)Serial.read();
    if(state == '5') {
      digitalWrite(LED_PIN, 0);
      stopMotors();
    } else if(state == '2') {
      digitalWrite(LED_PIN, 1);
      leftMotor(40);
      rightMotor(40);
    } else if(state == '8') {
      digitalWrite(LED_PIN, 1);
      leftMotor(-40);
      rightMotor(-40);
    } else if(state == '4') {
      digitalWrite(LED_PIN, 1);
      leftMotor(-30);
      rightMotor(30);
    } else if(state == '6') {
      digitalWrite(LED_PIN, 1);
      leftMotor(30);
      rightMotor(-30);
    } else if(state == '0') {
      digitalWrite(LED_PIN, 1);
      szukacz();
    }
  }
}

void leftMotor(int V) {
  if (V > 0) {
      V = map(V, 0, 100, 0, PWM_MAX);
      digitalWrite(L_DIR, 0);
      analogWrite(L_PWM, V);
  } else {
      V = abs(V);
      V = map(V, 0, 100, 0, PWM_MAX);
      digitalWrite(L_DIR, 1);
      analogWrite(L_PWM, V);
  }
}

void rightMotor(int V) {
  if (V > 0) {
      V = map(V, 0, 100, 0, PWM_MAX);
      digitalWrite(R_DIR, 0);
      analogWrite(R_PWM, V);
  } else {
      V = abs(V);
      V = map(V, 0, 100, 0, PWM_MAX);
      digitalWrite(R_DIR, 1);
      analogWrite(R_PWM, V);
  }
}

void stopMotors() {
  analogWrite(L_PWM, 0);
  analogWrite(R_PWM, 0);
}

void szukacz() {

while ((results.value = 0xFFC23D) || (Serial.available())) {

if (ZmierzOdleglosc() > 40) {
  leftMotor(40);
  rightMotor(40);
} else {
  stopMotors();
  serwo.write(20);
  delay(800);
    if (ZmierzOdleglosc() > 40) {
      leftMotor(40);
      rightMotor(-40);
      delay(400);
    } else {
      serwo.write(160);
      delay(800);
      if (ZmierzOdleglosc() > 40) {
        leftMotor(-40);
        rightMotor(40);
        delay(400);
      } else {
        stopMotors();
      }
    }
    serwo.write(90);
    }
delay(100);
      if ((irrecv.decode(&results)) || (Serial.available())) {
        char state = (char)Serial.read();
        if ((results.value == 0xFF38C7) || (state == '5')){
          stopMotors();
          return;
        }
        irrecv.resume();
      }
  
}
}

int ZmierzOdleglosc() {
long czas, dystans;

digitalWrite(7, LOW);    //trigPin na ekspanderze 7
delayMicroseconds(2);
digitalWrite(7, HIGH);
delayMicroseconds(10);
digitalWrite(7, LOW);

czas = pulseIn(echoPin, HIGH); 
dystans = czas /58;

return dystans;
}
